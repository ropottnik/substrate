// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 2.0.1
//! DATE: 2021-01-21, STEPS: [50, ], REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/substrate
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_initialize() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn update_schedule() -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(s: u32, ) -> Weight;
	fn call() -> Weight;
	fn claim_surcharge() -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_tombstone_deposit(r: u32, ) -> Weight;
	fn seal_rent_allowance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_restore_to(r: u32, ) -> Weight;
	fn seal_restore_to_per_delta(d: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_set_rent_allowance(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn on_initialize() -> Weight {
		(3_720_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(42_701_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((2_327_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(283_226_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((153_774_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn update_schedule() -> Weight {
		(27_210_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 125_000
			.saturating_add((153_056_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 62_000
			.saturating_add((2_820_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn instantiate(s: u32, ) -> Weight {
		(188_878_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_262_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn call() -> Weight {
		(169_682_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn claim_surcharge() -> Weight {
		(301_953_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn seal_caller(r: u32, ) -> Weight {
		(122_507_000 as Weight)
			// Standard Error: 128_000
			.saturating_add((254_741_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_address(r: u32, ) -> Weight {
		(125_135_000 as Weight)
			// Standard Error: 122_000
			.saturating_add((254_244_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_gas_left(r: u32, ) -> Weight {
		(127_620_000 as Weight)
			// Standard Error: 125_000
			.saturating_add((249_104_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_balance(r: u32, ) -> Weight {
		(115_746_000 as Weight)
			// Standard Error: 520_000
			.saturating_add((536_147_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_value_transferred(r: u32, ) -> Weight {
		(123_753_000 as Weight)
			// Standard Error: 128_000
			.saturating_add((251_025_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(123_588_000 as Weight)
			// Standard Error: 125_000
			.saturating_add((250_571_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(123_218_000 as Weight)
			// Standard Error: 121_000
			.saturating_add((250_677_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(132_882_000 as Weight)
			// Standard Error: 207_000
			.saturating_add((569_515_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_block_number(r: u32, ) -> Weight {
		(127_195_000 as Weight)
			// Standard Error: 129_000
			.saturating_add((248_217_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_now(r: u32, ) -> Weight {
		(123_296_000 as Weight)
			// Standard Error: 133_000
			.saturating_add((249_909_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(131_543_000 as Weight)
			// Standard Error: 170_000
			.saturating_add((484_078_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
	}
	fn seal_gas(r: u32, ) -> Weight {
		(114_123_000 as Weight)
			// Standard Error: 93_000
			.saturating_add((123_464_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_input(r: u32, ) -> Weight {
		(119_393_000 as Weight)
			// Standard Error: 65_000
			.saturating_add((7_165_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(130_293_000 as Weight)
			// Standard Error: 0
			.saturating_add((276_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_return(r: u32, ) -> Weight {
		(112_753_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((5_074_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(130_324_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((715_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_terminate(r: u32, ) -> Weight {
		(119_493_000 as Weight)
			// Standard Error: 110_000
			.saturating_add((92_900_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_restore_to(r: u32, ) -> Weight {
		(211_604_000 as Weight)
			// Standard Error: 390_000
			.saturating_add((125_153_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes((6 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_restore_to_per_delta(d: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_549_000
			.saturating_add((3_613_783_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	fn seal_random(r: u32, ) -> Weight {
		(149_918_000 as Weight)
			// Standard Error: 218_000
			.saturating_add((611_535_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
	}
	fn seal_deposit_event(r: u32, ) -> Weight {
		(159_237_000 as Weight)
			// Standard Error: 896_000
			.saturating_add((896_666_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_171_712_000 as Weight)
			// Standard Error: 2_087_000
			.saturating_add((548_297_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 411_000
			.saturating_add((244_819_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(142_280_000 as Weight)
			// Standard Error: 582_000
			.saturating_add((664_978_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn seal_set_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 27_962_000
			.saturating_add((17_089_659_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(1_631_059_000 as Weight)
			// Standard Error: 327_000
			.saturating_add((68_856_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_360_000
			.saturating_add((2_158_739_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage(r: u32, ) -> Weight {
		(67_381_000 as Weight)
			// Standard Error: 1_108_000
			.saturating_add((931_473_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(680_282_000 as Weight)
			// Standard Error: 535_000
			.saturating_add((151_239_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
	}
	fn seal_transfer(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_278_000
			.saturating_add((5_091_966_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 6_810_000
			.saturating_add((9_974_945_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight {
		(7_902_882_000 as Weight)
			// Standard Error: 185_390_000
			.saturating_add((4_391_501_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 66_000
			.saturating_add((56_243_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 70_000
			.saturating_add((81_748_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(T::DbWeight::get().reads(206 as Weight))
			.saturating_add(T::DbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 36_563_000
			.saturating_add((20_182_449_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight {
		(25_961_276_000 as Weight)
			// Standard Error: 119_000
			.saturating_add((50_543_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 119_000
			.saturating_add((77_890_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 119_000
			.saturating_add((274_367_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(207 as Weight))
			.saturating_add(T::DbWeight::get().writes(203 as Weight))
	}
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(127_818_000 as Weight)
			// Standard Error: 136_000
			.saturating_add((234_141_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(702_432_000 as Weight)
			// Standard Error: 35_000
			.saturating_add((425_507_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(126_472_000 as Weight)
			// Standard Error: 127_000
			.saturating_add((247_716_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(681_587_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((336_123_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(125_077_000 as Weight)
			// Standard Error: 109_000
			.saturating_add((221_158_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(581_777_000 as Weight)
			// Standard Error: 40_000
			.saturating_add((153_124_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(128_645_000 as Weight)
			// Standard Error: 115_000
			.saturating_add((219_835_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(590_117_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((152_966_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(25_508_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((3_193_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(27_806_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((160_489_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(27_848_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((233_026_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(25_382_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((12_563_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(25_501_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((12_213_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(25_441_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((6_256_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(25_557_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((13_855_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(25_454_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((15_202_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(38_293_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((103_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(25_758_000 as Weight)
			// Standard Error: 275_000
			.saturating_add((98_074_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(33_333_000 as Weight)
			// Standard Error: 529_000
			.saturating_add((201_406_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(248_228_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((3_424_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(44_614_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((3_124_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(44_527_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((3_515_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(44_520_000 as Weight)
			// Standard Error: 61_000
			.saturating_add((4_943_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(28_876_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((7_770_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(28_862_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((11_853_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(27_754_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((3_354_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(26_100_000 as Weight)
			// Standard Error: 4_649_000
			.saturating_add((2_338_369_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(25_410_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((5_246_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(25_386_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((5_241_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(25_377_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((5_913_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(25_373_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((5_349_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(25_368_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((5_187_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(25_400_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((5_221_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(25_362_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((5_207_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(25_381_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_324_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(25_332_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_210_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(25_390_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((7_181_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(25_380_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_251_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(25_350_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_187_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(25_414_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_222_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(25_374_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_074_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(25_351_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_160_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(25_345_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_155_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(25_375_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((7_218_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(25_400_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((6_989_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(25_372_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_028_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(25_351_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_134_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(25_348_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((12_963_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(25_351_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((12_189_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(25_290_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((13_043_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(25_331_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((12_324_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(25_392_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_100_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(25_372_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_095_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(25_371_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_053_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(25_407_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((7_216_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(25_364_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_311_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(25_371_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_245_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(25_379_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((7_266_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(25_385_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_199_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn on_initialize() -> Weight {
		(3_720_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(42_701_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((2_327_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(283_226_000 as Weight)
			// Standard Error: 49_000
			.saturating_add((153_774_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn update_schedule() -> Weight {
		(27_210_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 125_000
			.saturating_add((153_056_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 62_000
			.saturating_add((2_820_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	fn instantiate(s: u32, ) -> Weight {
		(188_878_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((2_262_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn call() -> Weight {
		(169_682_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn claim_surcharge() -> Weight {
		(301_953_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn seal_caller(r: u32, ) -> Weight {
		(122_507_000 as Weight)
			// Standard Error: 128_000
			.saturating_add((254_741_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_address(r: u32, ) -> Weight {
		(125_135_000 as Weight)
			// Standard Error: 122_000
			.saturating_add((254_244_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_gas_left(r: u32, ) -> Weight {
		(127_620_000 as Weight)
			// Standard Error: 125_000
			.saturating_add((249_104_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_balance(r: u32, ) -> Weight {
		(115_746_000 as Weight)
			// Standard Error: 520_000
			.saturating_add((536_147_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_value_transferred(r: u32, ) -> Weight {
		(123_753_000 as Weight)
			// Standard Error: 128_000
			.saturating_add((251_025_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(123_588_000 as Weight)
			// Standard Error: 125_000
			.saturating_add((250_571_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_tombstone_deposit(r: u32, ) -> Weight {
		(123_218_000 as Weight)
			// Standard Error: 121_000
			.saturating_add((250_677_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_rent_allowance(r: u32, ) -> Weight {
		(132_882_000 as Weight)
			// Standard Error: 207_000
			.saturating_add((569_515_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_block_number(r: u32, ) -> Weight {
		(127_195_000 as Weight)
			// Standard Error: 129_000
			.saturating_add((248_217_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_now(r: u32, ) -> Weight {
		(123_296_000 as Weight)
			// Standard Error: 133_000
			.saturating_add((249_909_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(131_543_000 as Weight)
			// Standard Error: 170_000
			.saturating_add((484_078_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
	}
	fn seal_gas(r: u32, ) -> Weight {
		(114_123_000 as Weight)
			// Standard Error: 93_000
			.saturating_add((123_464_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_input(r: u32, ) -> Weight {
		(119_393_000 as Weight)
			// Standard Error: 65_000
			.saturating_add((7_165_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(130_293_000 as Weight)
			// Standard Error: 0
			.saturating_add((276_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_return(r: u32, ) -> Weight {
		(112_753_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((5_074_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(130_324_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((715_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_terminate(r: u32, ) -> Weight {
		(119_493_000 as Weight)
			// Standard Error: 110_000
			.saturating_add((92_900_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_restore_to(r: u32, ) -> Weight {
		(211_604_000 as Weight)
			// Standard Error: 390_000
			.saturating_add((125_153_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes((6 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_restore_to_per_delta(d: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_549_000
			.saturating_add((3_613_783_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(d as Weight)))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(d as Weight)))
	}
	fn seal_random(r: u32, ) -> Weight {
		(149_918_000 as Weight)
			// Standard Error: 218_000
			.saturating_add((611_535_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
	}
	fn seal_deposit_event(r: u32, ) -> Weight {
		(159_237_000 as Weight)
			// Standard Error: 896_000
			.saturating_add((896_666_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(1_171_712_000 as Weight)
			// Standard Error: 2_087_000
			.saturating_add((548_297_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 411_000
			.saturating_add((244_819_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_set_rent_allowance(r: u32, ) -> Weight {
		(142_280_000 as Weight)
			// Standard Error: 582_000
			.saturating_add((664_978_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn seal_set_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 27_962_000
			.saturating_add((17_089_659_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_set_storage_per_kb(n: u32, ) -> Weight {
		(1_631_059_000 as Weight)
			// Standard Error: 327_000
			.saturating_add((68_856_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn seal_clear_storage(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 2_360_000
			.saturating_add((2_158_739_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage(r: u32, ) -> Weight {
		(67_381_000 as Weight)
			// Standard Error: 1_108_000
			.saturating_add((931_473_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(680_282_000 as Weight)
			// Standard Error: 535_000
			.saturating_add((151_239_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
	}
	fn seal_transfer(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_278_000
			.saturating_add((5_091_966_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((100 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((100 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 6_810_000
			.saturating_add((9_974_945_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((200 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight {
		(7_902_882_000 as Weight)
			// Standard Error: 185_390_000
			.saturating_add((4_391_501_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 66_000
			.saturating_add((56_243_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 70_000
			.saturating_add((81_748_000 as Weight).saturating_mul(o as Weight))
			.saturating_add(RocksDbWeight::get().reads(206 as Weight))
			.saturating_add(RocksDbWeight::get().writes((101 as Weight).saturating_mul(t as Weight)))
	}
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 36_563_000
			.saturating_add((20_182_449_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((300 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((300 as Weight).saturating_mul(r as Weight)))
	}
	fn seal_instantiate_per_input_output_salt_kb(i: u32, o: u32, s: u32, ) -> Weight {
		(25_961_276_000 as Weight)
			// Standard Error: 119_000
			.saturating_add((50_543_000 as Weight).saturating_mul(i as Weight))
			// Standard Error: 119_000
			.saturating_add((77_890_000 as Weight).saturating_mul(o as Weight))
			// Standard Error: 119_000
			.saturating_add((274_367_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(207 as Weight))
			.saturating_add(RocksDbWeight::get().writes(203 as Weight))
	}
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(127_818_000 as Weight)
			// Standard Error: 136_000
			.saturating_add((234_141_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(702_432_000 as Weight)
			// Standard Error: 35_000
			.saturating_add((425_507_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(126_472_000 as Weight)
			// Standard Error: 127_000
			.saturating_add((247_716_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(681_587_000 as Weight)
			// Standard Error: 37_000
			.saturating_add((336_123_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(125_077_000 as Weight)
			// Standard Error: 109_000
			.saturating_add((221_158_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(581_777_000 as Weight)
			// Standard Error: 40_000
			.saturating_add((153_124_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(128_645_000 as Weight)
			// Standard Error: 115_000
			.saturating_add((219_835_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(590_117_000 as Weight)
			// Standard Error: 36_000
			.saturating_add((152_966_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
	}
	fn instr_i64const(r: u32, ) -> Weight {
		(25_508_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((3_193_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64load(r: u32, ) -> Weight {
		(27_806_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((160_489_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64store(r: u32, ) -> Weight {
		(27_848_000 as Weight)
			// Standard Error: 31_000
			.saturating_add((233_026_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_select(r: u32, ) -> Weight {
		(25_382_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((12_563_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_if(r: u32, ) -> Weight {
		(25_501_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((12_213_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br(r: u32, ) -> Weight {
		(25_441_000 as Weight)
			// Standard Error: 13_000
			.saturating_add((6_256_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_if(r: u32, ) -> Weight {
		(25_557_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((13_855_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table(r: u32, ) -> Weight {
		(25_454_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((15_202_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(38_293_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((103_000 as Weight).saturating_mul(e as Weight))
	}
	fn instr_call(r: u32, ) -> Weight {
		(25_758_000 as Weight)
			// Standard Error: 275_000
			.saturating_add((98_074_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect(r: u32, ) -> Weight {
		(33_333_000 as Weight)
			// Standard Error: 529_000
			.saturating_add((201_406_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(248_228_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((3_424_000 as Weight).saturating_mul(p as Weight))
	}
	fn instr_local_get(r: u32, ) -> Weight {
		(44_614_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((3_124_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_set(r: u32, ) -> Weight {
		(44_527_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((3_515_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_local_tee(r: u32, ) -> Weight {
		(44_520_000 as Weight)
			// Standard Error: 61_000
			.saturating_add((4_943_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_get(r: u32, ) -> Weight {
		(28_876_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((7_770_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_global_set(r: u32, ) -> Weight {
		(28_862_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((11_853_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_current(r: u32, ) -> Weight {
		(27_754_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((3_354_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_memory_grow(r: u32, ) -> Weight {
		(26_100_000 as Weight)
			// Standard Error: 4_649_000
			.saturating_add((2_338_369_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64clz(r: u32, ) -> Weight {
		(25_410_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((5_246_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ctz(r: u32, ) -> Weight {
		(25_386_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((5_241_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(25_377_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((5_913_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eqz(r: u32, ) -> Weight {
		(25_373_000 as Weight)
			// Standard Error: 20_000
			.saturating_add((5_349_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(25_368_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((5_187_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(25_400_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((5_221_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(25_362_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((5_207_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64eq(r: u32, ) -> Weight {
		(25_381_000 as Weight)
			// Standard Error: 19_000
			.saturating_add((7_324_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ne(r: u32, ) -> Weight {
		(25_332_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_210_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64lts(r: u32, ) -> Weight {
		(25_390_000 as Weight)
			// Standard Error: 27_000
			.saturating_add((7_181_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ltu(r: u32, ) -> Weight {
		(25_380_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_251_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gts(r: u32, ) -> Weight {
		(25_350_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_187_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64gtu(r: u32, ) -> Weight {
		(25_414_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_222_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64les(r: u32, ) -> Weight {
		(25_374_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((7_074_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64leu(r: u32, ) -> Weight {
		(25_351_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_160_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64ges(r: u32, ) -> Weight {
		(25_345_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_155_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64geu(r: u32, ) -> Weight {
		(25_375_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((7_218_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64add(r: u32, ) -> Weight {
		(25_400_000 as Weight)
			// Standard Error: 23_000
			.saturating_add((6_989_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64sub(r: u32, ) -> Weight {
		(25_372_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_028_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64mul(r: u32, ) -> Weight {
		(25_351_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((7_134_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divs(r: u32, ) -> Weight {
		(25_348_000 as Weight)
			// Standard Error: 26_000
			.saturating_add((12_963_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64divu(r: u32, ) -> Weight {
		(25_351_000 as Weight)
			// Standard Error: 9_000
			.saturating_add((12_189_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rems(r: u32, ) -> Weight {
		(25_290_000 as Weight)
			// Standard Error: 11_000
			.saturating_add((13_043_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64remu(r: u32, ) -> Weight {
		(25_331_000 as Weight)
			// Standard Error: 22_000
			.saturating_add((12_324_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64and(r: u32, ) -> Weight {
		(25_392_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_100_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64or(r: u32, ) -> Weight {
		(25_372_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_095_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64xor(r: u32, ) -> Weight {
		(25_371_000 as Weight)
			// Standard Error: 17_000
			.saturating_add((7_053_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shl(r: u32, ) -> Weight {
		(25_407_000 as Weight)
			// Standard Error: 25_000
			.saturating_add((7_216_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shrs(r: u32, ) -> Weight {
		(25_364_000 as Weight)
			// Standard Error: 15_000
			.saturating_add((7_311_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64shru(r: u32, ) -> Weight {
		(25_371_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_245_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotl(r: u32, ) -> Weight {
		(25_379_000 as Weight)
			// Standard Error: 10_000
			.saturating_add((7_266_000 as Weight).saturating_mul(r as Weight))
	}
	fn instr_i64rotr(r: u32, ) -> Weight {
		(25_385_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((7_199_000 as Weight).saturating_mul(r as Weight))
	}
}
